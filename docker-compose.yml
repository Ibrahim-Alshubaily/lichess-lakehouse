version: "3.8"

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web console
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - lakehouse_net

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      KAFKA_KRAFT_CLUSTER_ID: "lichess-lakehouse-cluster"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
    volumes:
      - kafka_data:/bitnami
    ports:
      - "9092:9092"
      - "9093:9093"

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - metastore_db:/var/lib/postgresql/data
    networks:
      - lakehouse_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5

  hive-metastore:
    image: naushadh/hive-metastore
    container_name: hive-metastore
    ports:
      - "9083:9083"
    environment:
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_DB: ${POSTGRES_DB}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      S3_ENDPOINT_URL: ${MINIO_ENDPOINT}
      S3_BUCKET: ${WAREHOUSE_BUCKET}
      S3_PREFIX: ""
      AWS_ACCESS_KEY_ID: ${MINIO_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PASSWORD}
    depends_on:
      createbucket:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - lakehouse_net

  spark:
    build:
      context: .
      dockerfile: spark/Dockerfile
    env_file:
      - .env
    container_name: spark
    volumes:
      - ./ingestion-service/ingest.py:/app/scripts/ingest.py
    ports:
      - "10000:10000"  # Thrift JDBC
    depends_on:
      - hive-metastore
      - minio
    networks:
      - lakehouse_net

  superset:
    build:
      context: .
      dockerfile: superset/Dockerfile
    container_name: superset
    ports:
      - "8088:8088"
    depends_on:
      - spark
    networks:
      - lakehouse_net

  createbucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until mc alias set local ${MINIO_ENDPOINT} ${MINIO_USER} ${MINIO_PASSWORD}; do sleep 1; done;
      mc mb -p local/${WAREHOUSE_BUCKET} || true;
      echo 'âœ… MinIO bucket created (or already exists)';
      exit 0;"
    restart: "no"
    networks:
      - lakehouse_net

volumes:
  minio_data:
  kafka_data:
  metastore_db:

networks:
  lakehouse_net:
    name: lakehouse_net
    driver: bridge
